package com.Innspark.spring.boot.angularlogin.service.impl;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.hibernate.engine.jdbc.spi.SqlExceptionHelper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.web.server.ResponseStatusException;

import com.Innspark.spring.boot.angularlogin.dbUtil.DBConnection;
import com.Innspark.spring.boot.angularlogin.entity.Group;
import com.Innspark.spring.boot.angularlogin.entity.Previlege;
import com.Innspark.spring.boot.angularlogin.entity.Role;
import com.Innspark.spring.boot.angularlogin.entity.User;
import com.Innspark.spring.boot.angularlogin.payload.AddRequest;
import com.Innspark.spring.boot.angularlogin.repository.PrevilegeRepository;
import com.Innspark.spring.boot.angularlogin.repository.RoleRepository;
import com.Innspark.spring.boot.angularlogin.repository.UserRepository;
import com.Innspark.spring.boot.angularlogin.security.jwt.JwtUtils;
import com.Innspark.spring.boot.angularlogin.security.services.UserDetailsImpl;
import com.Innspark.spring.boot.angularlogin.service.UserService;


@Service
public class UserServiceImpl implements UserService {
	
	@Autowired
	private UserRepository userRepository;
	@Autowired
	private RoleRepository roleRepository;	
	@Autowired
	private PrevilegeRepository previlegeRepository;
	@Autowired
	private JwtUtils jwtUtils;
	 @Autowired
	private AuthenticationManager authenticationManager;
	 @Autowired
	private PasswordEncoder encoder;
	private Connection connection;
	
	
	public UserServiceImpl() throws SQLException
	{
		connection=DBConnection.getConnection();
	}
	
	
//	-------------------------------------Authentication login -------------------------
	
	@Override
	public UserDetailsImpl loginUser(User user)   {
		// TODO Auto-generated method stub
		
		
//		  Optional<User> userOptional = userRepository.findByUsername(user.getUsername());
//
//	        if (userOptional.isPresent()) {
//	            User usr = userOptional.get();
//
//	            if (usr.getPassword().equals(user.getPassword())) {
//	            	System.out.println("User LOGIN Successfully ");
//	                return usr;
//	            } else {
//	            	System.out.println("Invalid Password");
//	            	 throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, "Invalid Password");
//	                
//	            }
//	        } else {
//	        	System.out.println("User Name not found");
//	        	 throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Username not found");
//	        }
		
		 Authentication authentication = authenticationManager
			        .authenticate(new UsernamePasswordAuthenticationToken(user.getUsername(), user.getPassword()));
		 
		 
		  SecurityContextHolder.getContext().setAuthentication(authentication);

		    UserDetailsImpl userDetails = (UserDetailsImpl) authentication.getPrincipal();
		    
		    return userDetails ;

		
		
		
	}
	
//	@Override
//	public Boolean loginUser(String username, String password) {
//		// TODO Auto-generated method stub
//		boolean res=false;
//		
//		
//		try {
//			PreparedStatement statement=connection.prepareStatement("SELECT * FROM innuser WHERE username= '"+ username+"'");
//			ResultSet rs=statement.executeQuery();
//				while(rs.next())
//				{
//					if(rs.getString("username").equals(username))
//						
//					{
//						if(rs.getString("username").equals(username) && rs.getString("password").equals(password))
//						{
//							res=true;
//							System.out.println("Successfully loggedin");
//						}
//						else
//						{
//							System.out.println("Invalid Password");
//						}
//					}
//					else
//					{
//						System.out.println("UserName not matched");
//						
//					}
//					
//				}
//				
//				
//			
//			
//			
//			
//		}
//		catch(SQLException e)
//		{
//			e.printStackTrace();
//		}
//		
//		return res;
//		
//	}
	
	
	
	
	/* ---------------------------------------User ----------------------------------------------*/

	@Override
	public void addUser(AddRequest request) {
		// TODO Auto-generated method stub
		
//		User usrs=new User(
//				  user.getUsername(),
//				generatePWD(6),
//				user.getPrivelege()
//				
//				);
		
		User user=new User();
		user.setUsername(request.getUsername());
		
		user.setPassword(generatePWD(6));
		user.setPrivelege(request.getPrivelege());
		user.setIsFirstLogin(true);	
		user.setGroups(request.getGroup().stream().map(r -> {
			Group ur = new Group();
			ur.setName(r);
			return ur;
		}).collect(Collectors.toSet()));
		userRepository.save(user);
				
		
//		String sql = " insert into innuser (username, password,privelege,is_first_login)"
//			    + " values (?, ?,?,?)";
//		try {
//			PreparedStatement statement=connection.prepareStatement(sql);
//			statement.setString(1, usrs.getUsername());
//			statement.setString(2, usrs.getPassword());
//			statement.setString(3, usrs.getPrivelege());
//			statement.setBoolean(4, true);
//			
//			statement.executeUpdate();
//			System.out.println("Successfully added ");
//			
//			
//		} catch (SQLException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
//		
//		User createUser=userRepository.save(usrs);
//		return createUser;
	}	
	
	
	
	@Override
	public void changePassword(int id, User user) {
		// TODO Auto-generated method stub
		
//		
//String sql = "UPDATE `innuser` SET `password` = ?,`is_first_login` = ? WHERE `id` = ?";
//		
//		
//		try {
//			PreparedStatement statement=connection.prepareStatement(sql);
//			
//			statement.setString(1, user.getPassword());
//			statement.setBoolean(2, false);
//			statement.setInt(3, id);
//			statement.executeUpdate();
//			System.out.println("Change Password successfully");
//			
//		} catch (SQLException e) {
//			
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
		
		
		Optional<User> userOptional=userRepository.findById(id);
		
		if(userOptional.isPresent())
		{
			User usr=userOptional.get();
			usr.setPassword(user.getPassword());
			usr.setIsFirstLogin(false);
			userRepository.save(usr);
		}
		else
		{
			 throw new ResponseStatusException(HttpStatus.NOT_FOUND, "User not found");
			
		}
		
	}
	
	
	public List<User> getAllUser(){
		
		List<User> lstUsr=new ArrayList<User>();
		List<User> usr=new ArrayList<User>();
		
//		lstUsr=userRepository.findAll();
		String sql = " select * from innuser ";
		try {
			 usr=userRepository.findAll();
			 
			  System.out.println("user "  + usr);
			
//			PreparedStatement statement=connection.prepareStatement(sql);
//			ResultSet rs = statement.executeQuery();
//		     while (rs.next()) {
//
//		            User user = new User();
//		            
//		          
//		            user.setId(rs.getInt("id"));
//		            user.setUsername(rs.getString("Username"));
//		            user.setPassword(rs.getString("password"));
//		            user.setPrivelege(rs.getString("privelege"));
//		            
//
//		            lstUsr.add(user);
//		        }
			
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return usr;
		
		
	}
	
	
	@Override
	public void updateUser(int id,User user) {
		// TODO Auto-generated method stub
		
		
//		User exitUser=userRepository.findById(user.getId()).get();
//		exitUser.setUsername(user.getUsername());
//		exitUser.setPassword(user.getPassword());
//		exitUser.setPrivelege(user.getPrivelege());
//		User updateUser=userRepository.save(exitUser);
		
		
		String sql = "UPDATE `innuser` SET `username` = ?,`privelege` = ? WHERE `id` = ?";
		
		
		try {
			PreparedStatement statement=connection.prepareStatement(sql);
			
			statement.setString(1, user.getUsername());
			statement.setString(2, user.getPrivelege());
			statement.setInt(3, id);
			statement.executeUpdate();
			System.out.println("User update successfully");
			
		} catch (SQLException e) {
			
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
	} 
	@Override
	public User getById(int id) {
		// TODO Auto-generated method stub
		Optional<User> optionalUser=userRepository.findById(id);
		return optionalUser.get();
		
		
		
		
	}
	
	/* -----------------------------------------------------Role --------------------------------------------*/
	
	@Override
	public List<Role> getAllRole() {
		// TODO Auto-generated method stub
		
		List<Role> roles=new ArrayList();
		try
		{
			roles=roleRepository.findAll();
			
		}
		catch(Exception e)
		{
			e.printStackTrace();
			
		}
		System.out.println("Roles "  + roles);
		return roles;
	}


	@Override
	public void addRoles(Role role) {
		// TODO Auto-generated method stub
		
		
		Role roles=new Role();
		
		roles.setName(role.getName());
		roles.setOrg(role.getOrg());
		roles.setPrivelege(role.getPrivelege());
		roles.setDte(dateTime());
		
		System.out.println("Roles "+ roles);
		roleRepository.save(roles);
		
		
	}
	
	@Override
	public String editrole(Integer id, Role role) {
		// TODO Auto-generated method stub
		Optional<Role> oldrole=roleRepository.findById(id);
		if(oldrole.isPresent()){
			Role oldroles=oldrole.get();
			oldroles.setName(role.getName());
			oldroles.setPrivelege(role.getPrivelege());
			oldroles.setOrg(oldroles.getOrg());
			roleRepository.save(oldroles);
			return "Add role Successgully in database";
		}
		return null;
	}
	
	@Override
	public String deleterole(Integer id) {
		Optional<Role> role=roleRepository.findById(id);
		if(role.isPresent()){
			Role newrole=role.get();
			roleRepository.delete(newrole);
			return "Deleted successfully in database";
		}
		else{
			throw new ResponseStatusException(HttpStatus.NOT_FOUND,"Not found any role"); 
		}
		
	}
	
	
	
	
	/* ---------------------------------------------Privilege ------------------------------------*/

	@Override
	public void addPrivilege(Previlege previlege) {
		// TODO Auto-generated method stub
		
		
		
		Previlege prv=new Previlege();
		prv.setName(previlege.getName());
		prv.setCreateDate(dateTime());
		previlegeRepository.save(prv);
		
	}


	@Override
	public List<Previlege> getAllPvg() {
		// TODO Auto-generated method stub
		
		List<Previlege> prvg=previlegeRepository.findAll();
		
		System.out.println("List of Previlege "+ prvg);
		
		return prvg;
	}

	
	/* -------------------------------------------------------Others method ----------------------------------------*/
	
	static String generatePWD(int len) 
	{ 
	   
	    String str = "abcdefghijklmnopqrstuvwxyzABCD0123456789EFGHIJKLMNOPQRSTUVWXYZ"
	            +"EFGHIJKLMNOPQRSTUVWXYZ"; 
	    int n = str.length(); 
	  
	    // String to hold my Password
	    String psw=""; 
	  
	    for (int i = 1; i <= len; i++) 
	        psw += (str.charAt((int) ((Math.random()*10) % n))); 
	  
	    return(psw); 
	}

	public String dateTime()
	{
		String pattern = "MM/dd/yyyy HH:mm:ss";
		DateFormat df = new SimpleDateFormat(pattern);
		Date today = Calendar.getInstance().getTime(); 
		String todayAsString = df.format(today);
		return todayAsString;
	}

	
	
	/* ------------------------------------------------------------Check Privilege --------------------------------------*/
	
	
	

	@Override
	public boolean isPayload(String role, String org) {
		// TODO Auto-generated method stub
//		  boolean res=false;
//		try
//		{
//			PreparedStatement statement=connection.prepareStatement("SELECT privelege FROM roles WHERE name= '"+role+"' and org= '"+group+"'");
//			ResultSet rs=statement.executeQuery();
//			List<String> listpvg=new ArrayList<String>();
//			String str=null;
//			while(rs.next()) {
//				Role prrvgs=new Role();
//				
//				prrvgs.setPrivelege(rs.getArray("privelege"));
//				
//				 res=true;
//			
//			}
//			System.out.println(str);
//		}
//		catch(SQLException e)
//		{
//			e.printStackTrace();
//		}
//		
		
//		List<Role> roles=roleRepository.findAllActiveUsersNative();
//		roles.forEach((item)->System.out.println(item));
		
//		List<String> privileges = new ArrayList<>();
//		
//		 String sql = "SELECT privelege FROM roles WHERE name = ? AND org = ?";
//         try (PreparedStatement statement = connection.prepareStatement(sql)) {
//             statement.setString(1, role);
//             statement.setString(2, group);
//
//             try (ResultSet resultSet = statement.executeQuery()) {
//                 if (resultSet.next()) {
//                     String privilegeString = resultSet.getString("privelege");
//                     
//                     if (privilegeString != null && !privilegeString.isEmpty())
//                     {
//                    	 String[] privilegeArray = privilegeString.split(",");
//                    	 for (String privilege : privilegeArray)
//                    	 {
//                    		 System.out.println("check " + privilege);
//                    		 if(privilege.equals("pvg6"))
//                    		 {
//                    			 res=true;
//                    		 }
//                    	 }
//                    	 
//                     }
//                     System.out.println("string " + privilegeString);
//                     privileges = parsePrivilegeString(privilegeString);
//                     
//                     
//                     System.out.println("privilege List " + privileges);
//                 }
//             }
//         }
//         catch(SQLException e)
//         {
//        	 
//         }
//		List<String> privilege=new ArrayList<String>();
		
		List<Role> roles=roleRepository.findByNameAndOrg(role, org);
		boolean res=false;
		
		for(Role rl: roles)
		{
			List<String> list=rl.getPrivelege();
			for(String pvgs : list)
			{
				if(pvgs.equals("pvg6"))
				{
					res=true;
					System.out.println(" access payload");
				}
				System.out.println("Need permission to access payload");
			}
			
		}
		
		
//		roles.forEach((r)->
//		{
////			r.getPrivelege();
//			
//			List<String> list=r.getPrivelege();
////			res=list.stream().filter(rol->rol.equals("pvg6"))list;
//
//			for(String pvgs:list) {
//				
//				if(pvgs.equals("pvg6"))
//					res=true;
//				
//				
//			}
//			System.out.println("Privilege List " + r.getPrivelege());
//			
//		});
		
		return res;
	}
	
	
	
	
	private List<String> parsePrivilegeString(String privilegeString) {
	    List<String> privileges = new ArrayList<>();
	    
	    if (privilegeString != null && !privilegeString.isEmpty()) {
	        // Split the comma-separated string into individual privileges
	        String[] privilegeArray = privilegeString.split(",");
	        
	        for (String privilege : privilegeArray) {
	            privileges.add(privilege.trim());  // Add each privilege to the list (remove leading/trailing spaces)
	            privileges.add(",");
	        }
	    }
	    
	    return privileges;
	}


	@Override
	public boolean isRoleAccess(String role, String org) {
		// TODO Auto-generated method stub
		List<Role> roles=roleRepository.findByNameAndOrg(role, org);
		boolean res=false;
		
		for(Role rl: roles)
		{
			List<String> list=rl.getPrivelege();
			for(String pvgs : list)
			{
				if(pvgs.equals("pvg6"))
				{
					res=true;
					System.out.println(" access add role");
				}
				System.out.println("Need permission to access add role");
			}
			
		}
		
		
		return res;
	}



	

}
